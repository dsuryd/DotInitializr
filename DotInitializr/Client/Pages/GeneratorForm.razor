@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

<VMContext VM="GeneratorForm" TState="IGeneratorFormState" OnStateChange="UpdateState">
  @if (state != null)
  {
    <d-form>
      <d-frame>
        <d-panel horizontal="true">
          <d-panel>
            <d-dropdown-list id="Template" />
          </d-panel>
          <d-panel center="true" flex="1" css="padding-top:1.5rem;color:#666">
            <d-label id="Description" />
          </d-panel>
        </d-panel>
        <MetadataForm />
        <d-button id="Generate" label="Generate Project" submit="true" css="padding:.25rem 3rem" />
      </d-frame>
    </d-form>
  }
</VMContext>
@if (state?.Loading == true || loading)
{
  <div class="spinner" />
}

@code {
  private IGeneratorFormState state;
  private bool loading;

  private void UpdateState(IGeneratorFormState state)
  {
    this.state = state;
    if (state.ProjectMetadata != null)
    {
      this.loading = true;
      _ = GenerateAsync(state.ProjectMetadata);
      this.state.ClearProjectMetadata();
    }

    StateHasChanged();
  }

  private async Task GenerateAsync(ProjectMetadata metadata)
  {
    var response = await Http.PostAsJsonAsync("api/generator", state.ProjectMetadata);
    await JSRuntime.InvokeAsync<string>("saveFile", new object[]
    {
      Convert.ToBase64String(await response.Content.ReadAsByteArrayAsync()),
      response.Content.Headers.ContentDisposition.FileName,
      response.Content.Headers.ContentType.ToString()
    });

    this.loading = false;
    StateHasChanged();
  }
}
