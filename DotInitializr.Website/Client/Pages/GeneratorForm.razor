@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavManager;

<VMContext VM="GeneratorForm" TState="IGeneratorFormState" Options="Options" OnStateChange="UpdateState" OnException="HandleException">
    @if (state != null)
    {
        <d-form>
            @if (error != null)
            {
                <d-alert danger="true">@error</d-alert>
            }
            <d-panel horizontal="true">
                <d-panel>
                    <d-dropdown-list id="Template" />
                </d-panel>
                <d-panel center="true" flex="1" css="padding-top:1.5rem;color:#666">
                    <d-label id="Description" />
                </d-panel>
            </d-panel>
            <MetadataForm />
            <d-button id="Generate" label="Generate Project" submit="true" css="margin-top:1.5rem;padding:.25rem 3rem" />
        </d-form>
    }
</VMContext>
@if (ShowSpinner)
{
    <div class="spinner" />
}

@code {
    private IGeneratorFormState state;
    private bool loading;
    private string error;

    private bool ShowSpinner => (state?.Loading == true || loading) && error == null;

    private VMConnectOptions Options
    {
        get
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            var queryStrings = QueryHelpers.ParseQuery(uri.Query).ToDictionary(x => x.Key.ToLower(), x =>   x.Value.ToString());
            return new VMConnectOptions { VMArg = new Dictionary<string, object> { { "QueryStrings", queryStrings } } };
        }
    }

    private void UpdateState(IGeneratorFormState state)
    {
        this.state = state;
        if (state.ProjectMetadata != null)
        {
            this.loading = true;
            _ = GenerateAsync(state.ProjectMetadata);
            this.state.ClearProjectMetadata();
        }

        if (state.Loading == false)
            this.error = null;

        StateHasChanged();
    }

    private async Task GenerateAsync(ProjectMetadata metadata)
    {
        var response = await Http.PostAsJsonAsync("api/generator", state.ProjectMetadata);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await JSRuntime.InvokeAsync<string>("saveFile", new object[]
            {
              Convert.ToBase64String(await response.Content.ReadAsByteArrayAsync()),
              response.Content.Headers.ContentDisposition.FileName,
              response.Content.Headers.ContentType.ToString()
                });
        }
        else
            this.error = await response.Content.ReadAsStringAsync();


        this.loading = false;
        StateHasChanged();
    }

    private void HandleException(ExceptionEventArgs e)
    {
        this.error = e.Message;
    }
}
